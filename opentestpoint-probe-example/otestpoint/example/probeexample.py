#
# Copyright (c) 2016-2017,2019 - Adjacent Link LLC, Bridgewater,
# New Jersey
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
#  * Neither the name of Adjacent Link LLC nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# See toplevel COPYING for more information.
#

"""
Example probe
"""


from __future__ import absolute_import, division, print_function
from otestpoint.interface import Probe
from otestpoint.interface.measurementtable_pb2 import MeasurementTable
import otestpoint.toolkit.logger as Logger
from .probeexample_pb2 import Measurement_example_probeexample
import socket
import fcntl
import struct
import subprocess
import re

# note: pyroute2.iproute.IPRoute get_links() contains memory leak at
# least in version 0.3.15.
def if_indextoname(index):
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    return fcntl.ioctl(
        s.fileno(),
        0x8910,  # SIOCGIFNAME
        struct.pack('16si20s', b'',index,b''))[:16].decode('utf-8').rstrip('\0')

def parse_mcast_route(src,group,iface,ofaces,measurement):
    row = measurement.mcastroutingtable.rows.add()

    value = row.values.add()
    value.type = MeasurementTable.Measurement.TYPE_STRING
    value.sValue = src

    value = row.values.add()
    value.type = MeasurementTable.Measurement.TYPE_STRING
    value.sValue = group

    value = row.values.add()
    value.type = MeasurementTable.Measurement.TYPE_STRING
    value.sValue = iface

    value = row.values.add()
    value.type = MeasurementTable.Measurement.TYPE_STRING

    if len(ofaces):
        value.sValue =ofaces
    else:
        value.sValue = 'NA'

def parse_route(route,oifs,measurement):
    row = measurement.routingtable.rows.add()

    value = row.values.add()
    if 'table' in route:
        value.type = MeasurementTable.Measurement.TYPE_UINTEGER
        value.uValue = route['table']
    else:
        value.type = MeasurementTable.Measurement.TYPE_STRING
        value.sValue = 'NA'

    value = row.values.add()
    value.type = MeasurementTable.Measurement.TYPE_STRING
    dst = route.get('dst')
    value.sValue = 'NA' if dst == None else dst

    value = row.values.add()
    value.type = MeasurementTable.Measurement.TYPE_STRING
    prefsrc = route.get('prefsrc')
    value.sValue = 'NA' if prefsrc == None else prefsrc

    value = row.values.add()
    priority = route.get('priority')
    if priority != None:
        value.type = MeasurementTable.Measurement.TYPE_UINTEGER
        value.uValue = priority
    else:
        value.type = MeasurementTable.Measurement.TYPE_STRING
        value.sValue = 'NA'

    value = row.values.add()
    value.type = MeasurementTable.Measurement.TYPE_STRING
    oif = route.get('oif')

    if oif == None:
        value.sValue = 'NA'
    else:
        if oif not in oifs:
            oifs[oif] = if_indextoname(oif)

        value.sValue = oifs[oif]

    value = row.values.add()
    value.type = MeasurementTable.Measurement.TYPE_STRING
    gateway = route.get('gateway')
    value.sValue = 'NA' if gateway == None else gateway

    value = row.values.add()
    value.type = MeasurementTable.Measurement.TYPE_UINTEGER
    value.uValue = route['dst_len']

    value = row.values.add()
    value.type = MeasurementTable.Measurement.TYPE_UINTEGER
    value.uValue = route['proto']

    value = row.values.add()
    value.type = MeasurementTable.Measurement.TYPE_UINTEGER
    value.uValue = route['tos']


class Routing(Probe):
    def initialize(self,configurationFile=None):
        """
        Initialize the probe.

        Returns:
        The probe name list.
        """
        self._logger.log(Logger.DEBUG_LEVEL,
                         "/example/probeexample initialize"
                         " configuration: %s" % configurationFile)

        self._exampletable=[[0,0,0],[0,0,0],[0,0,0]]

        return ('Example.ProbeExample.Tables.ExampleTable')

    def start(self):
        """
        Starts the probe.

        This method does nothing.
        """
        self._logger.log(Logger.DEBUG_LEVEL,'/example/probeexample start')

    def stop(self):
        """
        Stops the probe.

        This method does nothing.
        """
        self._logger.log(Logger.DEBUG_LEVEL,'/example/probeexample stop')

    def destroy(self):
        """
        Destroys the probe.

        This method does nothing.
        """
        self._logger.log(Logger.DEBUG_LEVEL,'/example/probeexample destroy')

    def probe(self):
        """
        Gets the current time of day probe data
        """
        self._logger.log(Logger.DEBUG_LEVEL,'/example/probeexample probe')

        return (("Example.ProbeExample.Tables.ExampleTable",
                 self._exampletable.SerializeToString(),
                 self._exampletable.description.name,
                 self._exampletable.description.module,
                 self._exampletable.description.version))

def default_method_format(self,measurement):
    """
    Generates formatted measurement string.
    """
    def fromMeasurement(measurement):
        if measurement.type == MeasurementTable.Measurement.TYPE_SINTEGER:
            return measurement.iValue
        elif measurement.type == MeasurementTable.Measurement.TYPE_UINTEGER:
            return measurement.uValue
        elif measurement.type == MeasurementTable.Measurement.TYPE_DOUBLE:
            return measurement.dValue
        else:
            return measurement.sValue

    def build_table(name,table):
        buf = "[] %s\n" % name

        rows = len(table) # height

        columns = len(table[0]) # width

        for i in range(rows):
            for j in range(columns):
                buf += table[i][j] + " "
            buf += "\n"

        return buf

    buf= ""
    buf += build_table('exampletable',measurement.exampletable)
    return buf

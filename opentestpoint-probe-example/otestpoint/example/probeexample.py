#
# Copyright (c) 2016-2017,2019 - Adjacent Link LLC, Bridgewater,
# New Jersey
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
#  * Neither the name of Adjacent Link LLC nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# See toplevel COPYING for more information.
#

"""
Example probe
"""


from __future__ import absolute_import, division, print_function

from .probebase import ProbeBase
#from otestpoint.examle.probebase import ProbeBase
from otestpoint.interface.measurementtable_pb2 import MeasurementTable
import otestpoint.toolkit.logger as Logger
from .probeexample_pb2 import Measurement_example_probeexample_tables_subject
import socket
import fcntl
import struct
import subprocess
import re

class ProbeExample(ProbeBase):
    def __init__(self):
        ProbeBase.__init__(self,
                           'ProbeExample',
                           'probeexample',
                           'otestpoint.example',
                           'probe-example-probeexample.xsd')
        """
        Initialize the probe.

        Returns:
        The probe name list.
        """
        """
        self._logger.log(Logger.DEBUG_LEVEL,
                         "/example/probeexample initialize"
                         " configuration: probe-exmaple-probeexample.xsd")
        """
        
        self._exampletable=[["field1",0],["field2",0],["field3",0]]

        #return ('Example.ProbeExample.Tables.ExampleTable')
        
    def build(self,probe):
        c = globals()[probe]
        p = c()
        return p
    
def default_method_format(self,measurement):
    """
    Generates formatted measurement string.
    """
    def fromMeasurement(measurement):
        if measurement.type == MeasurementTable.Measurement.TYPE_SINTEGER:
            return measurement.iValue
        elif measurement.type == MeasurementTable.Measurement.TYPE_UINTEGER:
            return measurement.uValue
        elif measurement.type == MeasurementTable.Measurement.TYPE_DOUBLE:
            return measurement.dValue
        else:
            return measurement.sValue

    def build_table(name,table):
        buf = "[] %s\n" % name

        rows = len(table) # height

        columns = len(table[0]) # width

        for i in range(rows):
            for j in range(columns):
                buf += table[i][j] + " "
            buf += "\n"

        return buf

    buf= ""
    #buf += build_table('exampletable',measurement.exampletable)
    buf+="i am a buffer from default_method_format located in probeexample.py"
    return buf
